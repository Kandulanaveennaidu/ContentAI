// src/app/content-brief-generator/page.tsx
"use client";

import { Header } from '@/components/layout/Header';
import { Footer } from '@/components/layout/Footer';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { FileText, Lightbulb, CheckSquare, Target, Users, RefreshCw, Copy } from 'lucide-react';
import { motion } from 'framer-motion';
import Image from 'next/image';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

// Placeholder for Genkit flow if we were to implement actual generation
// import { generateContentBrief, type ContentBriefInput } from '@/ai/flows/content-brief-flow'; 

const briefFormSchema = z.object({
  mainKeyword: z.string().min(3, "Main keyword must be at least 3 characters."),
  targetAudience: z.string().min(5, "Target audience description is required."),
  contentGoal: z.string().min(10, "Content goal description is required."),
  secondaryKeywords: z.string().optional(),
  toneOfVoice: z.string().optional(),
});
type BriefFormValues = z.infer<typeof briefFormSchema>;

const placeholderBrief = `
## Content Brief: **{{mainKeyword}}**

**1. Primary Goal:**
   - {{contentGoal}}

**2. Target Audience:**
   - {{targetAudience}}

**3. Key Topics & Talking Points:**
   - [AI Suggestion] Explain the core concept of {{mainKeyword}}.
   - [AI Suggestion] Discuss common challenges related to {{mainKeyword}}.
   - [AI Suggestion] Offer solutions or best practices.
   - [AI Suggestion] Include examples or case studies if applicable.

**4. SEO & Keywords:**
   - **Primary Keyword:** {{mainKeyword}}
   - **Secondary Keywords:** {{secondaryKeywords}} (e.g., related terms, long-tail variations)
   - **Internal Linking:** Suggest linking to [relevant internal page 1] and [relevant internal page 2].
   - **External Linking:** Consider citing authoritative sources like [example.com/research].

**5. Tone of Voice:**
   - {{toneOfVoice}} (e.g., Professional, Casual, Informative, Persuasive)

**6. Call to Action (CTA):**
   - [AI Suggestion] Encourage readers to [desired action, e.g., learn more, sign up, contact us].

**7. Structure & Formatting:**
   - **Estimated Word Count:** 800-1200 words
   - Use clear headings (H2, H3) for sections.
   - Incorporate bullet points or numbered lists for readability.
   - Include at least 1-2 relevant images or visuals.

**8. Competitor Insights (Conceptual - AI would populate this):**
   - Competitor A covers X, Y, Z. Opportunity to elaborate on W.
   - Competitor B misses aspect P. We can highlight this.

**Generated by ContentAI Brief Generator**
`;


const fadeIn = (delay: number = 0, y: number = 20) => ({
  hidden: { opacity: 0, y },
  visible: { opacity: 1, y: 0, transition: { duration: 0.6, delay, ease: "easeOut" } },
});

export default function ContentBriefGeneratorPage() {
  const [generatedBrief, setGeneratedBrief] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<BriefFormValues>({
    resolver: zodResolver(briefFormSchema),
    defaultValues: { mainKeyword: "", targetAudience: "", contentGoal: "", secondaryKeywords: "", toneOfVoice: "Informative & Engaging" },
  });

  async function onSubmit(data: BriefFormValues) {
    setIsLoading(true);
    setGeneratedBrief('');

    // Simulate AI generation
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    let briefText = placeholderBrief;
    briefText = briefText.replace(/{{mainKeyword}}/g, data.mainKeyword);
    briefText = briefText.replace(/{{contentGoal}}/g, data.contentGoal);
    briefText = briefText.replace(/{{targetAudience}}/g, data.targetAudience);
    briefText = briefText.replace(/{{secondaryKeywords}}/g, data.secondaryKeywords || 'N/A');
    briefText = briefText.replace(/{{toneOfVoice}}/g, data.toneOfVoice || 'As specified');

    setGeneratedBrief(briefText);
    setIsLoading(false);
    toast({ title: "Content Brief Generated!", description: "Your AI-powered brief is ready below."});
  }

  const handleCopyToClipboard = () => {
    if (generatedBrief) {
      navigator.clipboard.writeText(generatedBrief);
      toast({ title: "Copied to Clipboard!", description: "The content brief has been copied."});
    }
  };

  const benefits = [
    { icon: CheckSquare, text: "Ensure content alignment with strategic goals." },
    { icon: Users, text: "Improve collaboration between writers, editors, and SEOs." },
    { icon: Lightbulb, text: "Spark creativity with AI-suggested talking points." },
    { icon: Target, text: "Maintain brand voice and consistency across all content." },
  ];


  return (
    <div className="flex min-h-screen flex-col bg-background">
      <Header />
      <main className="flex-grow py-12 md:py-20">
        <div className="container mx-auto px-4 md:px-6">
          <motion.section
            className="text-center mb-12 md:mb-16"
            variants={fadeIn()}
            initial="hidden"
            animate="visible"
          >
            <FileText className="mx-auto h-16 w-16 text-primary mb-4" />
            <h1 className="text-4xl font-bold tracking-tight text-foreground sm:text-5xl">
              AI Content <span className="text-primary">Brief Generator</span>
            </h1>
            <p className="mt-4 max-w-3xl mx-auto text-lg text-muted-foreground">
              Kickstart your content creation with comprehensive, AI-powered briefs. Define your goals, audience, and keywords, and let ContentAI craft a detailed roadmap for high-performing content.
            </p>
          </motion.section>

          <div className="grid lg:grid-cols-5 gap-8 lg:gap-12">
            {/* Input Form Section */}
            <motion.div 
              className="lg:col-span-2"
              variants={fadeIn(0.2)}
              initial="hidden"
              animate="visible"
            >
              <Card className="shadow-xl sticky top-24">
                <CardHeader>
                  <CardTitle className="text-2xl">Create Your Brief</CardTitle>
                  <CardDescription>Provide key details, and our AI will generate a starting brief.</CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                      <FormField control={form.control} name="mainKeyword" render={({ field }) => (
                        <FormItem>
                          <FormLabel>Main Keyword/Topic</FormLabel>
                          <FormControl><Input placeholder="e.g., 'AI in marketing'" {...field} /></FormControl>
                          <FormMessage />
                        </FormItem>
                      )}/>
                      <FormField control={form.control} name="targetAudience" render={({ field }) => (
                        <FormItem>
                          <FormLabel>Target Audience</FormLabel>
                          <FormControl><Textarea placeholder="e.g., 'Small business owners new to digital marketing'" {...field} rows={2}/></FormControl>
                          <FormMessage />
                        </FormItem>
                      )}/>
                      <FormField control={form.control} name="contentGoal" render={({ field }) => (
                        <FormItem>
                          <FormLabel>Primary Goal of Content</FormLabel>
                          <FormControl><Textarea placeholder="e.g., 'Educate on benefits of X, drive sign-ups for Y'" {...field} rows={2}/></FormControl>
                          <FormMessage />
                        </FormItem>
                      )}/>
                       <FormField control={form.control} name="secondaryKeywords" render={({ field }) => (
                        <FormItem>
                          <FormLabel>Secondary Keywords (Optional)</FormLabel>
                          <FormControl><Input placeholder="e.g., 'content strategy, SEO basics'" {...field} /></FormControl>
                        </FormItem>
                      )}/>
                      <FormField control={form.control} name="toneOfVoice" render={({ field }) => (
                        <FormItem>
                          <FormLabel>Desired Tone of Voice (Optional)</FormLabel>
                          <FormControl><Input placeholder="e.g., 'Professional, Authoritative, Friendly'" {...field} /></FormControl>
                        </FormItem>
                      )}/>
                      <Button type="submit" className="w-full py-3" disabled={isLoading}>
                        {isLoading ? <><RefreshCw className="mr-2 h-4 w-4 animate-spin" /> Generating...</> : "Generate Brief"}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </motion.div>

            {/* Output/Explanation Section */}
            <motion.div 
              className="lg:col-span-3"
              variants={fadeIn(0.4)}
              initial="hidden"
              animate="visible"
            >
              {generatedBrief ? (
                <Card className="shadow-lg">
                  <CardHeader className="flex flex-row justify-between items-center">
                    <div>
                      <CardTitle className="text-2xl">Your Generated Content Brief</CardTitle>
                      <CardDescription>Review and refine this AI-generated starting point.</CardDescription>
                    </div>
                    <Button variant="outline" size="icon" onClick={handleCopyToClipboard} title="Copy to Clipboard">
                      <Copy className="h-4 w-4"/>
                    </Button>
                  </CardHeader>
                  <CardContent>
                    <pre className="bg-muted p-4 rounded-md text-sm whitespace-pre-wrap break-words max-h-[60vh] overflow-y-auto font-sans text-foreground">
                      {generatedBrief}
                    </pre>
                  </CardContent>
                </Card>
              ) : (
                <Card className="shadow-lg min-h-[400px] flex flex-col items-center justify-center text-center bg-secondary/30 border-dashed border-border p-8">
                    <Image src="https://picsum.photos/seed/briefgen/400/250" alt="Content brief illustration" width={300} height={188} className="rounded-md mb-6 opacity-70" data-ai-hint="document idea lightbulb"/>
                    <h3 className="text-xl font-semibold text-foreground mb-2">Your AI-Powered Brief Will Appear Here</h3>
                    <p className="text-muted-foreground">
                      Fill in the details on the left to generate a comprehensive content brief. ContentAI helps you define scope, target audience, SEO considerations, and key talking points, ensuring your content is set up for success from the start.
                    </p>
                </Card>
              )}

              <motion.div className="mt-10" variants={fadeIn(0.2)}>
                <h3 className="text-2xl font-semibold text-foreground mb-4">Benefits of Using Content Briefs:</h3>
                <div className="grid sm:grid-cols-2 gap-4">
                  {benefits.map(benefit => (
                    <div key={benefit.text} className="flex items-start p-3 bg-card rounded-md shadow">
                      <benefit.icon className="h-5 w-5 mr-3 mt-0.5 text-primary flex-shrink-0"/>
                      <p className="text-sm text-muted-foreground">{benefit.text}</p>
                    </div>
                  ))}
                </div>
                <div className="mt-8 text-center">
                  <Link href="/optimize" passHref>
                    <Button variant="link" className="text-lg">Learn more about optimizing your content <ArrowRight className="h-5 w-5 ml-1" /></Button>
                  </Link>
                </div>
              </motion.div>
            </motion.div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
}
